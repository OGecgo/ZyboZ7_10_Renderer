
#include "zybo_z7_hdmi/display_ctrl.h"
#include "zybo_z7_hdmi/vga_modes.h"

#include "xdebug.h"
#include "xstatus.h"

#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "rasterizer/draw.h"

void clearBuffer(uint32_t* buffer, int size){
    memset(buffer, 255, size);
}

int main()
{   
    DisplayCtrl win;  // Changed from pointer to object
    static uint32_t framePtr[DISPLAY_NUM_FRAMES][1280 * 720];  // Made static to avoid stack overflow

    const VideoMode video = VMODE_1280x720;
    int back = 0;

    // Create array of pointers to the frame buffers
    void *framePtrArray[DISPLAY_NUM_FRAMES];
    framePtrArray[0] = (void*)framePtr[0];
    framePtrArray[1] = (void*)framePtr[1];

    if (DisplayInitialize(&win, 0x43000000, 0x43c10000, 0x43c00000, framePtrArray, video.width * 4) != XST_SUCCESS){
        printf("Error initialize window\n");
        return 1;
    }

    if (DisplaySetMode(&win, &video) != XST_SUCCESS){
        printf("Error video mode\n");
        return 1;
    }

    if (DisplayStart(&win) != XST_SUCCESS){
        printf("Error video start\n");
        return 1;
    }

    int pointer = 0;

    int x = 0;
    int y = 0;
    while(1){
        // clear
        clearBuffer((uint32_t*)framePtrArray[pointer], video.width * video.height * 4);

        // draw 
        drawLine(x, y, 640, 360, (uint32_t*)framePtrArray[pointer], video.width, video.height);

        if (!back && x < video.width) {
            x++;
            if (y < video.height && x == video.width){
                y++;
                x--;
            } else if (y == video.height){
                back = 1;
            }
        }
        else if (back && x > 0){
            x--;
            if (y > 0 && x == 0){
                y--;
                x++;
            }else if (y == 0){
                back = 0;
            }
        }

        // present
        DisplayChangeFrame(&win, pointer);

        // syncronize
        DisplayWaitForSync(&win);
        pointer = !pointer; // move to second buffer
        } 

    return 0;
}
